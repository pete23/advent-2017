(ns advent.day-1
  (:use clojure.test))

; http://adventofcode.com/2017/day/1

(def input

(defn char-to-digit [char]
  (- (int char) (int \0)))

(defn string-to-digits [string]
  (map char-to-digit string))

; pair each digit with the next digit - add the last digit to the start of the sequence to wrap around
(defn pairing-fn-1 [digits]
  (partition 2 1 (conj digits (last digits))))

; split the digits into two equal sized lists and pair up each element
(defn pairing-fn-2 [digits]
  (apply map #(vector %1 %2) (split-at (/ (count digits) 2) digits)))

; create pairs from a string of numbers, then add the numbers where the pairs match
(defn engine [string pairing-fn]
  (let [digits (string-to-digits string)
        pairs (pairing-fn digits)]
    (reduce + (map first (filter #(apply = %) pairs)))))

(defn day-1-1
  ([] (day-1-1 input))
  ([string] (engine string pairing-fn-1)))

(deftest test-1
  (is (= 3 (day-1-1 "1122")))
  (is (= 4 (day-1-1 "1111")))
  (is (= 0 (day-1-1 "1234")))
  (is (= 9 (day-1-1 "91212129"))))

(defn day-1-2
  ([] (day-1-2 input))
  ([string]
   ; need to be x2 as our pairing engine only pairs the first half with the second not vice versa
   ; due to the symmetry we can just x2 rather than do twice the work...
   (* 2 (engine string pairing-fn-2))))

(deftest test-2
  (is (= 6 (day-1-2 "1212")))
  (is (= 0 (day-1-2 "1221")))
  (is (= 4 (day-1-2 "123425")))
  (is (= 12 (day-1-2 "123123")))
  (is (= 4 (day-1-2 "12131415"))))
